#!/usr/bin/env python3
"""
Script de Verifica√ß√£o de Funcionamento - P√≥s Corre√ß√µes
=====================================================

Verifica se todos os servi√ßos est√£o funcionando corretamente ap√≥s as corre√ß√µes
de nomenclatura e problemas de concorr√™ncia aplicadas.

Testa especificamente:
1. Servi√ßos b√°sicos funcionando
2. Consist√™ncia de nomenclatura (duracaoSegundos vs duracao_segundos)
3. Funcionamento do data_loader
4. Aus√™ncia de modifica√ß√µes diretas de dados compartilhados
"""

import sys
import time
import requests
import json
import subprocess
import asyncio
from typing import Dict, List, Optional, Any
from concurrent.futures import ThreadPoolExecutor
import threading
import grpc

# Importar m√≥dulos locais para testes diretos
try:
    from data_loader import get_data_loader
    from streaming_pb2 import Empty
    from streaming_pb2_grpc import StreamingServiceStub
    DATA_LOADER_AVAILABLE = True
except ImportError as e:
    print(f"Aviso: N√£o foi poss√≠vel importar m√≥dulos locais: {e}")
    DATA_LOADER_AVAILABLE = False

class VerificadorServicos:
    """Classe para verificar o funcionamento dos servi√ßos."""
    
    def __init__(self):
        self.resultados = {
            'data_loader': {'status': 'pendente', 'detalhes': []},
            'rest': {'status': 'pendente', 'detalhes': []},
            'graphql': {'status': 'pendente', 'detalhes': []},
            'soap': {'status': 'pendente', 'detalhes': []},
            'grpc': {'status': 'pendente', 'detalhes': []},
        }
        self.urls = {
            'rest': 'http://localhost:8000',
            'graphql': 'http://localhost:8001/graphql',
            'soap': 'http://localhost:8004',
            'grpc': 'localhost:50051'
        }

    def log_resultado(self, servico: str, status: str, detalhe: str):
        """Registra resultado de teste."""
        self.resultados[servico]['status'] = status
        self.resultados[servico]['detalhes'].append(detalhe)
        simbolo = "‚úÖ" if status == "sucesso" else "‚ùå" if status == "erro" else "‚ö†Ô∏è"
        print(f"{simbolo} {servico.upper()}: {detalhe}")

    def verificar_data_loader(self):
        """Verifica funcionamento do data_loader."""
        print("\nüîç Verificando Data Loader...")
        
        if not DATA_LOADER_AVAILABLE:
            self.log_resultado('data_loader', 'erro', 'M√≥dulos n√£o dispon√≠veis para teste direto')
            return False

        try:
            # Teste 1: Carregamento b√°sico
            loader = get_data_loader()
            self.log_resultado('data_loader', 'sucesso', 'Data loader carregado com sucesso')
            
            # Teste 2: Verificar dados b√°sicos
            usuarios = loader.listar_todos_usuarios()
            musicas = loader.listar_todas_musicas()
            self.log_resultado('data_loader', 'sucesso', f'Carregados {len(usuarios)} usu√°rios e {len(musicas)} m√∫sicas')
            
            # Teste 3: Verificar nomenclatura consistente
            if musicas:
                primeira_musica = musicas[0]
                if 'duracaoSegundos' in primeira_musica:
                    self.log_resultado('data_loader', 'sucesso', 'Campo duracaoSegundos encontrado nos dados JSON')
                else:
                    self.log_resultado('data_loader', 'aviso', 'Campo duracaoSegundos n√£o encontrado - verificar estrutura')
            
            # Teste 4: M√©todos espec√≠ficos funcionando
            if hasattr(loader, 'obter_musica_por_id') and musicas:
                musica_teste = loader.obter_musica_por_id(musicas[0]['id'])
                if musica_teste:
                    self.log_resultado('data_loader', 'sucesso', 'M√©todo obter_musica_por_id funcionando')
                else:
                    self.log_resultado('data_loader', 'erro', 'M√©todo obter_musica_por_id retornou None')
            
            return True

        except Exception as e:
            self.log_resultado('data_loader', 'erro', f'Erro no data_loader: {str(e)}')
            return False

    def verificar_servico_rest(self):
        """Verifica funcionamento do servi√ßo REST."""
        print("\nüîµ Verificando Servi√ßo REST...")
        
        try:
            # Teste 1: Servi√ßo est√° rodando
            response = requests.get(f"{self.urls['rest']}/", timeout=5)
            if response.status_code == 200:
                self.log_resultado('rest', 'sucesso', 'Servi√ßo REST respondendo')
            else:
                self.log_resultado('rest', 'erro', f'Status inesperado: {response.status_code}')
                return False

            # Teste 2: Endpoint de usu√°rios
            response = requests.get(f"{self.urls['rest']}/usuarios", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'items' in data and isinstance(data['items'], list):
                    self.log_resultado('rest', 'sucesso', f'Endpoint usuarios OK - {len(data["items"])} usu√°rios')
                else:
                    self.log_resultado('rest', 'aviso', 'Estrutura de resposta inesperada para usu√°rios')
            else:
                self.log_resultado('rest', 'erro', f'Erro no endpoint usuarios: {response.status_code}')

            # Teste 3: Endpoint de m√∫sicas (verificar nomenclatura)
            response = requests.get(f"{self.urls['rest']}/musicas", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'items' in data and data['items']:
                    primeira_musica = data['items'][0]
                    if 'duracaoSegundos' in primeira_musica:
                        self.log_resultado('rest', 'sucesso', 'Campo duracaoSegundos presente na API REST')
                    else:
                        self.log_resultado('rest', 'aviso', 'Campo duracaoSegundos n√£o encontrado na resposta REST')
                self.log_resultado('rest', 'sucesso', f'Endpoint musicas OK - {len(data["items"])} m√∫sicas')
            else:
                self.log_resultado('rest', 'erro', f'Erro no endpoint musicas: {response.status_code}')

            # Teste 4: Estat√≠sticas
            response = requests.get(f"{self.urls['rest']}/stats", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                self.log_resultado('rest', 'sucesso', f'Estat√≠sticas: {stats.get("total_usuarios", 0)} usu√°rios')
            else:
                self.log_resultado('rest', 'aviso', f'Estat√≠sticas n√£o dispon√≠veis: {response.status_code}')

            return True

        except requests.RequestException as e:
            self.log_resultado('rest', 'erro', f'Erro de conex√£o: {str(e)}')
            return False

    def verificar_servico_graphql(self):
        """Verifica funcionamento do servi√ßo GraphQL."""
        print("\nüü£ Verificando Servi√ßo GraphQL...")
        
        try:
            # Teste 1: Query de usu√°rios
            query_usuarios = {
                "query": """
                query {
                    usuarios {
                        id
                        nome
                        idade
                    }
                }
                """
            }
            
            response = requests.post(self.urls['graphql'], json=query_usuarios, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'data' in data and 'usuarios' in data['data']:
                    usuarios = data['data']['usuarios']
                    self.log_resultado('graphql', 'sucesso', f'Query usuarios OK - {len(usuarios)} usu√°rios')
                else:
                    self.log_resultado('graphql', 'erro', 'Estrutura de resposta inv√°lida para usuarios')
            else:
                self.log_resultado('graphql', 'erro', f'Erro na query usuarios: {response.status_code}')

            # Teste 2: Query de m√∫sicas (verificar nomenclatura)
            query_musicas = {
                "query": """
                query {
                    musicas {
                        id
                        nome
                        artista
                        duracao_segundos
                    }
                }
                """
            }
            
            response = requests.post(self.urls['graphql'], json=query_musicas, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'data' in data and 'musicas' in data['data']:
                    musicas = data['data']['musicas']
                    if musicas and 'duracao_segundos' in musicas[0]:
                        self.log_resultado('graphql', 'sucesso', 'Campo duracao_segundos presente no GraphQL')
                    self.log_resultado('graphql', 'sucesso', f'Query musicas OK - {len(musicas)} m√∫sicas')
                else:
                    self.log_resultado('graphql', 'erro', 'Estrutura de resposta inv√°lida para musicas')
            else:
                self.log_resultado('graphql', 'erro', f'Erro na query musicas: {response.status_code}')

            # Teste 3: Estat√≠sticas
            query_stats = {
                "query": """
                query {
                    estatisticas {
                        total_usuarios
                        total_musicas
                        total_playlists
                        tecnologia
                    }
                }
                """
            }
            
            response = requests.post(self.urls['graphql'], json=query_stats, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'data' in data and 'estatisticas' in data['data']:
                    stats = data['data']['estatisticas']
                    self.log_resultado('graphql', 'sucesso', f'Estat√≠sticas: {stats.get("total_usuarios", 0)} usu√°rios')
                else:
                    self.log_resultado('graphql', 'aviso', 'Estat√≠sticas n√£o dispon√≠veis')
            else:
                self.log_resultado('graphql', 'aviso', f'Erro nas estat√≠sticas: {response.status_code}')

            return True

        except requests.RequestException as e:
            self.log_resultado('graphql', 'erro', f'Erro de conex√£o: {str(e)}')
            return False

    def verificar_servico_soap(self):
        """Verifica funcionamento do servi√ßo SOAP."""
        print("\nüü° Verificando Servi√ßo SOAP...")
        
        try:
            # Teste 1: Servi√ßo est√° rodando
            response = requests.get(self.urls['soap'], timeout=5)
            if response.status_code == 200:
                self.log_resultado('soap', 'sucesso', 'Servi√ßo SOAP respondendo')
            else:
                self.log_resultado('soap', 'aviso', f'P√°gina inicial retornou: {response.status_code}')

            # Teste 2: WSDL dispon√≠vel
            response = requests.get(f"{self.urls['soap']}?wsdl", timeout=5)
            if response.status_code == 200 and 'xml' in response.headers.get('content-type', '').lower():
                self.log_resultado('soap', 'sucesso', 'WSDL dispon√≠vel')
            else:
                self.log_resultado('soap', 'erro', 'WSDL n√£o dispon√≠vel ou inv√°lido')
                return False

            # Teste 3: Verificar se m√©todos padronizados est√£o presentes
            wsdl_content = response.text
            if 'obter_usuario' in wsdl_content and 'GetUser' not in wsdl_content:
                self.log_resultado('soap', 'sucesso', 'Nomenclatura padronizada aplicada (sem GetUser)')
            elif 'GetUser' in wsdl_content:
                self.log_resultado('soap', 'aviso', 'M√©todos antigos ainda presentes (GetUser)')
            
            # Para testar opera√ß√µes SOAP reais, precisar√≠amos do cliente zeep
            # Por simplicidade, apenas verificamos se o servi√ßo est√° respondendo
            
            return True

        except requests.RequestException as e:
            self.log_resultado('soap', 'erro', f'Erro de conex√£o: {str(e)}')
            return False

    def verificar_servico_grpc(self):
        """Verifica funcionamento do servi√ßo gRPC."""
        print("\nüü¢ Verificando Servi√ßo gRPC...")
        
        if not DATA_LOADER_AVAILABLE:
            self.log_resultado('grpc', 'aviso', 'M√≥dulos gRPC n√£o dispon√≠veis para teste direto')
            return False

        try:
            # Teste 1: Conex√£o b√°sica
            channel = grpc.insecure_channel(self.urls['grpc'])
            stub = StreamingServiceStub(channel)
            
            # Teste 2: Opera√ß√£o de estat√≠sticas
            response = stub.ObterEstatisticas(Empty())
            if response:
                self.log_resultado('grpc', 'sucesso', f'gRPC funcionando - {response.total_usuarios} usu√°rios')
            else:
                self.log_resultado('grpc', 'erro', 'Resposta vazia do gRPC')
                return False

            # Teste 3: Verificar se m√©todo corrigido funciona
            # (O StreamMusicas usa obter_musica_por_id internamente)
            try:
                # Este teste indireto verifica se a corre√ß√£o foi aplicada
                musicas_response = stub.ListarTodasMusicas(Empty())
                if musicas_response and musicas_response.musicas:
                    primeira_musica = musicas_response.musicas[0]
                    if hasattr(primeira_musica, 'duracao_segundos'):
                        self.log_resultado('grpc', 'sucesso', 'Campo duracao_segundos presente no gRPC')
                    self.log_resultado('grpc', 'sucesso', f'ListarTodasMusicas OK - {len(musicas_response.musicas)} m√∫sicas')
                else:
                    self.log_resultado('grpc', 'aviso', 'Nenhuma m√∫sica retornada pelo gRPC')
            except Exception as e:
                self.log_resultado('grpc', 'erro', f'Erro ao listar m√∫sicas: {str(e)}')

            channel.close()
            return True

        except grpc.RpcError as e:
            self.log_resultado('grpc', 'erro', f'Erro gRPC: {str(e)}')
            return False
        except Exception as e:
            self.log_resultado('grpc', 'erro', f'Erro de conex√£o gRPC: {str(e)}')
            return False

    def verificar_consistencia_nomenclatura(self):
        """Verifica se a nomenclatura est√° consistente entre servi√ßos."""
        print("\nüîç Verificando Consist√™ncia de Nomenclatura...")
        
        consistencia = {
            'json_usa_camelCase': False,
            'graphql_usa_snake_case': False,
            'grpc_usa_snake_case': False,
            'conversoes_funcionando': True
        }
        
        # Verificar se as verifica√ß√µes anteriores detectaram os campos corretos
        for servico, resultado in self.resultados.items():
            detalhes = ' '.join(resultado['detalhes'])
            
            if servico == 'rest' and 'duracaoSegundos presente' in detalhes:
                consistencia['json_usa_camelCase'] = True
            elif servico == 'graphql' and 'duracao_segundos presente' in detalhes:
                consistencia['graphql_usa_snake_case'] = True
            elif servico == 'grpc' and 'duracao_segundos presente' in detalhes:
                consistencia['grpc_usa_snake_case'] = True

        # Relat√≥rio de consist√™ncia
        if consistencia['json_usa_camelCase']:
            self.log_resultado('data_loader', 'sucesso', 'JSON usa camelCase (duracaoSegundos) ‚úì')
        else:
            self.log_resultado('data_loader', 'aviso', 'JSON camelCase n√£o confirmado')

        if consistencia['graphql_usa_snake_case']:
            self.log_resultado('graphql', 'sucesso', 'GraphQL usa snake_case (duracao_segundos) ‚úì')
        else:
            self.log_resultado('graphql', 'aviso', 'GraphQL snake_case n√£o confirmado')

        if consistencia['grpc_usa_snake_case']:
            self.log_resultado('grpc', 'sucesso', 'gRPC usa snake_case (duracao_segundos) ‚úì')
        else:
            self.log_resultado('grpc', 'aviso', 'gRPC snake_case n√£o confirmado')

        return all(consistencia.values())

    def executar_verificacao_completa(self):
        """Executa verifica√ß√£o completa de todos os servi√ßos."""
        print("üöÄ Iniciando Verifica√ß√£o de Funcionamento P√≥s-Corre√ß√µes")
        print("=" * 60)
        
        inicio = time.time()
        
        # Verifica√ß√µes em paralelo onde poss√≠vel
        resultados = {}
        
        # Data loader primeiro (base para outros)
        resultados['data_loader'] = self.verificar_data_loader()
        
        # Servi√ßos em paralelo
        with ThreadPoolExecutor(max_workers=4) as executor:
            future_rest = executor.submit(self.verificar_servico_rest)
            future_graphql = executor.submit(self.verificar_servico_graphql)
            future_soap = executor.submit(self.verificar_servico_soap)
            future_grpc = executor.submit(self.verificar_servico_grpc)
            
            resultados['rest'] = future_rest.result()
            resultados['graphql'] = future_graphql.result()
            resultados['soap'] = future_soap.result()
            resultados['grpc'] = future_grpc.result()

        # Verifica√ß√£o de consist√™ncia
        self.verificar_consistencia_nomenclatura()
        
        # Relat√≥rio final
        self.gerar_relatorio_final(resultados, time.time() - inicio)
        
        return resultados

    def gerar_relatorio_final(self, resultados: Dict[str, bool], tempo_execucao: float):
        """Gera relat√≥rio final da verifica√ß√£o."""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DE VERIFICA√á√ÉO")
        print("=" * 60)
        
        sucessos = sum(1 for r in resultados.values() if r)
        total = len(resultados)
        
        print(f"‚úÖ Servi√ßos funcionando: {sucessos}/{total}")
        print(f"‚è±Ô∏è  Tempo de execu√ß√£o: {tempo_execucao:.2f}s")
        print()
        
        # Status detalhado por servi√ßo
        for servico, funcionando in resultados.items():
            status_emoji = "‚úÖ" if funcionando else "‚ùå"
            status_resultado = self.resultados[servico]['status']
            
            print(f"{status_emoji} {servico.upper()}: {status_resultado}")
            
            # Mostrar detalhes se houver problemas
            if not funcionando or status_resultado != 'sucesso':
                for detalhe in self.resultados[servico]['detalhes']:
                    print(f"    - {detalhe}")
        
        print()
        
        # Veredicto final
        if sucessos == total:
            print("üéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
            print("üìã O sistema est√° pronto para demonstra√ß√£o.")
        elif sucessos >= total * 0.75:
            print("‚ö†Ô∏è  MAIORIA DOS SERVI√áOS FUNCIONANDO")
            print("üìã Sistema funcional com algumas ressalvas.")
        else:
            print("‚ùå PROBLEMAS SIGNIFICATIVOS DETECTADOS")
            print("üìã Revisar corre√ß√µes antes da demonstra√ß√£o.")
            
        print("\nüéØ Pr√≥ximos passos sugeridos:")
        if sucessos == total:
            print("   1. Executar demonstra√ß√£o completa")
            print("   2. Preparar apresenta√ß√£o")
            print("   3. Documentar funcionalidades")
        else:
            print("   1. Corrigir problemas identificados")
            print("   2. Executar nova verifica√ß√£o")
            print("   3. Testar funcionalidades espec√≠ficas")

def aguardar_servicos(timeout=30):
    """Aguarda os servi√ßos ficarem dispon√≠veis."""
    print("‚è≥ Aguardando servi√ßos ficarem dispon√≠veis...")
    
    servicos = [
        ('REST', 'http://localhost:8000'),
        ('GraphQL', 'http://localhost:8001'),
        ('SOAP', 'http://localhost:8004'),
    ]
    
    inicio = time.time()
    while time.time() - inicio < timeout:
        todos_ok = True
        for nome, url in servicos:
            try:
                response = requests.get(url, timeout=2)
                if response.status_code not in [200, 404]:  # 404 pode ser OK se n√£o h√° rota raiz
                    todos_ok = False
                    break
            except:
                todos_ok = False
                break
        
        if todos_ok:
            print("‚úÖ Todos os servi√ßos est√£o respondendo!")
            return True
            
        print(".", end="", flush=True)
        time.sleep(2)
    
    print(f"\n‚ö†Ô∏è  Timeout ap√≥s {timeout}s - continuando mesmo assim...")
    return False

def main():
    """Fun√ß√£o principal."""
    print("üîß VERIFICADOR DE FUNCIONAMENTO P√ìS-CORRE√á√ïES")
    print("Validando corre√ß√µes de nomenclatura e funcionamento b√°sico")
    print()
    
    # Verificar se deve aguardar servi√ßos
    if len(sys.argv) > 1 and sys.argv[1] == '--wait':
        aguardar_servicos()
    
    verificador = VerificadorServicos()
    resultados = verificador.executar_verificacao_completa()
    
    # C√≥digo de sa√≠da baseado nos resultados
    sucessos = sum(1 for r in resultados.values() if r)
    total = len(resultados)
    
    if sucessos == total:
        sys.exit(0)  # Todos os testes passaram
    elif sucessos >= total * 0.75:
        sys.exit(1)  # Maioria passou, mas h√° problemas
    else:
        sys.exit(2)  # Problemas significativos

if __name__ == "__main__":
    main()

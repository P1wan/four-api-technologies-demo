# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import streaming_pb2 as streaming__pb2


class StreamingServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListarTodosUsuarios = channel.unary_unary(
                '/streaming.StreamingService/ListarTodosUsuarios',
                request_serializer=streaming__pb2.Empty.SerializeToString,
                response_deserializer=streaming__pb2.UsuariosResponse.FromString,
                )
        self.ListarTodasMusicas = channel.unary_unary(
                '/streaming.StreamingService/ListarTodasMusicas',
                request_serializer=streaming__pb2.Empty.SerializeToString,
                response_deserializer=streaming__pb2.MusicasResponse.FromString,
                )
        self.ListarPlaylistsUsuario = channel.unary_unary(
                '/streaming.StreamingService/ListarPlaylistsUsuario',
                request_serializer=streaming__pb2.UsuarioRequest.SerializeToString,
                response_deserializer=streaming__pb2.PlaylistsResponse.FromString,
                )
        self.ListarMusicasPlaylist = channel.unary_unary(
                '/streaming.StreamingService/ListarMusicasPlaylist',
                request_serializer=streaming__pb2.PlaylistRequest.SerializeToString,
                response_deserializer=streaming__pb2.MusicasResponse.FromString,
                )
        self.ListarPlaylistsComMusica = channel.unary_unary(
                '/streaming.StreamingService/ListarPlaylistsComMusica',
                request_serializer=streaming__pb2.MusicaRequest.SerializeToString,
                response_deserializer=streaming__pb2.PlaylistsResponse.FromString,
                )
        self.ObterEstatisticas = channel.unary_unary(
                '/streaming.StreamingService/ObterEstatisticas',
                request_serializer=streaming__pb2.Empty.SerializeToString,
                response_deserializer=streaming__pb2.EstatisticasResponse.FromString,
                )
        self.StreamMusicas = channel.stream_stream(
                '/streaming.StreamingService/StreamMusicas',
                request_serializer=streaming__pb2.MusicaRequest.SerializeToString,
                response_deserializer=streaming__pb2.Musica.FromString,
                )


class StreamingServiceServicer(object):
    """Service definition
    """

    def ListarTodosUsuarios(self, request, context):
        """Basic operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarTodasMusicas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarPlaylistsUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarMusicasPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarPlaylistsComMusica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterEstatisticas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMusicas(self, request_iterator, context):
        """Streaming operation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListarTodosUsuarios': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarTodosUsuarios,
                    request_deserializer=streaming__pb2.Empty.FromString,
                    response_serializer=streaming__pb2.UsuariosResponse.SerializeToString,
            ),
            'ListarTodasMusicas': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarTodasMusicas,
                    request_deserializer=streaming__pb2.Empty.FromString,
                    response_serializer=streaming__pb2.MusicasResponse.SerializeToString,
            ),
            'ListarPlaylistsUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarPlaylistsUsuario,
                    request_deserializer=streaming__pb2.UsuarioRequest.FromString,
                    response_serializer=streaming__pb2.PlaylistsResponse.SerializeToString,
            ),
            'ListarMusicasPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarMusicasPlaylist,
                    request_deserializer=streaming__pb2.PlaylistRequest.FromString,
                    response_serializer=streaming__pb2.MusicasResponse.SerializeToString,
            ),
            'ListarPlaylistsComMusica': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarPlaylistsComMusica,
                    request_deserializer=streaming__pb2.MusicaRequest.FromString,
                    response_serializer=streaming__pb2.PlaylistsResponse.SerializeToString,
            ),
            'ObterEstatisticas': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterEstatisticas,
                    request_deserializer=streaming__pb2.Empty.FromString,
                    response_serializer=streaming__pb2.EstatisticasResponse.SerializeToString,
            ),
            'StreamMusicas': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamMusicas,
                    request_deserializer=streaming__pb2.MusicaRequest.FromString,
                    response_serializer=streaming__pb2.Musica.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.StreamingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamingService(object):
    """Service definition
    """

    @staticmethod
    def ListarTodosUsuarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ListarTodosUsuarios',
            streaming__pb2.Empty.SerializeToString,
            streaming__pb2.UsuariosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListarTodasMusicas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ListarTodasMusicas',
            streaming__pb2.Empty.SerializeToString,
            streaming__pb2.MusicasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListarPlaylistsUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ListarPlaylistsUsuario',
            streaming__pb2.UsuarioRequest.SerializeToString,
            streaming__pb2.PlaylistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListarMusicasPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ListarMusicasPlaylist',
            streaming__pb2.PlaylistRequest.SerializeToString,
            streaming__pb2.MusicasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListarPlaylistsComMusica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ListarPlaylistsComMusica',
            streaming__pb2.MusicaRequest.SerializeToString,
            streaming__pb2.PlaylistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObterEstatisticas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/streaming.StreamingService/ObterEstatisticas',
            streaming__pb2.Empty.SerializeToString,
            streaming__pb2.EstatisticasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamMusicas(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.StreamingService/StreamMusicas',
            streaming__pb2.MusicaRequest.SerializeToString,
            streaming__pb2.Musica.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

"""
Servi√ßo REST para Streaming de M√∫sicas - FastAPI
================================================

Implementa√ß√£o completa do servi√ßo REST usando FastAPI.
Otimizado para execu√ß√£o em ambientes web como Replit.

Para executar:
1. pip install fastapi uvicorn
2. uvicorn rest_service:app --host 0.0.0.0 --port 8000
3. Acesse: http://localhost:8000/docs para Swagger UI
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel, Field
from typing import List, Dict, Optional
import json
import os
from contextlib import asynccontextmanager

# Importa o carregador real de dados gerados em ``data/``
from dataloaders import get_data_loader

# ========== MODELS PYDANTIC PARA VALIDA√á√ÉO ==========

class UsuarioCreate(BaseModel):
    """Model para cria√ß√£o de usu√°rio."""
    nome: str = Field(..., min_length=1, max_length=100, description="Nome do usu√°rio")
    idade: int = Field(..., ge=0, le=150, description="Idade do usu√°rio")

class UsuarioUpdate(BaseModel):
    """Model para atualiza√ß√£o de usu√°rio."""
    nome: Optional[str] = Field(None, min_length=1, max_length=100, description="Nome do usu√°rio")
    idade: Optional[int] = Field(None, ge=0, le=150, description="Idade do usu√°rio")

class MusicaCreate(BaseModel):
    """Model para cria√ß√£o de m√∫sica."""
    nome: str = Field(..., min_length=1, max_length=200, description="Nome da m√∫sica")
    artista: str = Field(..., min_length=1, max_length=100, description="Nome do artista")
    duracao_segundos: int = Field(..., gt=0, le=7200, description="Dura√ß√£o em segundos")

class MusicaUpdate(BaseModel):
    """Model para atualiza√ß√£o de m√∫sica."""
    nome: Optional[str] = Field(None, min_length=1, max_length=200, description="Nome da m√∫sica")
    artista: Optional[str] = Field(None, min_length=1, max_length=100, description="Nome do artista")
    duracao_segundos: Optional[int] = Field(None, gt=0, le=7200, description="Dura√ß√£o em segundos")

class PlaylistCreate(BaseModel):
    """Model para cria√ß√£o de playlist."""
    nome: str = Field(..., min_length=1, max_length=200, description="Nome da playlist")
    id_usuario: str = Field(..., description="ID do usu√°rio propriet√°rio")
    musicas: List[str] = Field(default_factory=list, description="Lista de IDs das m√∫sicas")

class PlaylistUpdate(BaseModel):
    """Model para atualiza√ß√£o de playlist."""
    nome: Optional[str] = Field(None, min_length=1, max_length=200, description="Nome da playlist")
    musicas: Optional[List[str]] = Field(None, description="Lista de IDs das m√∫sicas")

# ---------------------------------------------------------------------------
# Observa√ß√£o sobre o antigo ``SimpleDataLoader``
# ---------------------------------------------------------------------------
# A implementa√ß√£o original deste servi√ßo usava dados "mock" em mem√≥ria para
# facilitar a execu√ß√£o em ambientes web. Para o trabalho final, os dados devem
# ser carregados a partir dos arquivos JSON gerados por ``modelagem_dados.py``.
# O ``StreamingDataLoader`` providencia consultas otimizadas e √© compartilhado
# entre todos os backends. A classe a seguir permanece apenas como refer√™ncia de
# como os exemplos eram estruturados.
class SimpleDataLoader:
    def __init__(self):
        self.usuarios = []
        self.musicas = []
        self.playlists = []
        self._carregar_dados_mock()

    def _carregar_dados_mock(self):
        """Carrega dados mock para demonstra√ß√£o (substitui arquivos JSON)."""
        self.usuarios = [
            {"id": "user1", "nome": "Ana Silva", "idade": 28},
            {"id": "user2", "nome": "Jo√£o Santos", "idade": 35},
            {"id": "user3", "nome": "Maria Costa", "idade": 22},
            {"id": "user4", "nome": "Pedro Lima", "idade": 45},
            {"id": "user5", "nome": "Lucia Ferreira", "idade": 31}
        ]

        self.musicas = [
            {"id": "music1", "nome": "Amor Perfeito", "artista": "Ana Silva", "duracao_segundos": 240},
            {"id": "music2", "nome": "Noite Estrelada", "artista": "Jo√£o Santos", "duracao_segundos": 210},
            {"id": "music3", "nome": "Cora√ß√£o Selvagem", "artista": "Maria Costa", "duracao_segundos": 195},
            {"id": "music4", "nome": "Despertar", "artista": "Pedro Lima", "duracao_segundos": 280},
            {"id": "music5", "nome": "Liberdade", "artista": "Ana Silva", "duracao_segundos": 225},
            {"id": "music6", "nome": "Saudade", "artista": "Lucia Ferreira", "duracao_segundos": 260},
            {"id": "music7", "nome": "Tempestade", "artista": "Jo√£o Santos", "duracao_segundos": 190},
            {"id": "music8", "nome": "Serenata", "artista": "Maria Costa", "duracao_segundos": 175}
        ]

        self.playlists = [
            {
                "id": "playlist1",
                "nome": "Meus Favoritos",
                "id_usuario": "user1",
                "musicas": ["music1", "music2", "music5"]
            },
            {
                "id": "playlist2",
                "nome": "Relaxar",
                "id_usuario": "user1",
                "musicas": ["music3", "music6", "music8"]
            },
            {
                "id": "playlist3",
                "nome": "Energia Total",
                "id_usuario": "user2",
                "musicas": ["music4", "music7", "music1", "music5"]
            },
            {
                "id": "playlist4",
                "nome": "Workout Mix",
                "id_usuario": "user3",
                "musicas": ["music2", "music4", "music7"]
            }
        ]

        print(f"‚úÖ Dados mock carregados: {len(self.usuarios)} usu√°rios, {len(self.musicas)} m√∫sicas, {len(self.playlists)} playlists")

# Inst√¢ncia global do data loader
# Sempre que poss√≠vel utilizamos os arquivos JSON gerados em ``data/``.
# Caso o carregamento falhe (ex.: arquivos ausentes), recai-se para o loader
# simplificado apenas para fins de demonstra√ß√£o.
try:
    data_loader = get_data_loader()
    print("‚úÖ Dados reais carregados do diret√≥rio 'data/'")
except Exception as exc:  # pragma: no cover - falha somente em ambiente demo
    print(f"‚ö†Ô∏è  Erro ao carregar dados reais: {exc}")
    print("üîÑ Utilizando SimpleDataLoader como fallback")
    data_loader = SimpleDataLoader()

# Configura√ß√£o do FastAPI
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Servidor REST iniciando...")
    yield
    # Shutdown
    print("üõë Servidor REST finalizando...")

app = FastAPI(
    title="Servi√ßo de Streaming - REST API",
    description="""
    API REST para gerenciamento de usu√°rios, m√∫sicas e playlists.
    
    ## Funcionalidades
    
    * Gerenciamento completo de usu√°rios (CRUD)
    * Gerenciamento completo de m√∫sicas (CRUD)
    * Gerenciamento completo de playlists (CRUD)
    * Pagina√ß√£o em todas as listagens
    * Tratamento de erros padronizado
    * Documenta√ß√£o OpenAPI/Swagger
    
    ## Autentica√ß√£o
    
    Esta API n√£o requer autentica√ß√£o para demonstra√ß√£o.
    
    ## Endpoints
    
    * `/usuarios` - Gerenciamento de usu√°rios
    * `/musicas` - Gerenciamento de m√∫sicas
    * `/playlists` - Gerenciamento de playlists
    * `/stats` - Estat√≠sticas do servi√ßo
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    openapi_tags=[
        {
            "name": "usuarios",
            "description": "Opera√ß√µes relacionadas a usu√°rios",
        },
        {
            "name": "musicas",
            "description": "Opera√ß√µes relacionadas a m√∫sicas",
        },
        {
            "name": "playlists",
            "description": "Opera√ß√µes relacionadas a playlists",
        },
        {
            "name": "estatisticas",
            "description": "Opera√ß√µes relacionadas a estat√≠sticas do servi√ßo",
        }
    ],
    lifespan=lifespan
)

# Configurar CORS para permitir acesso de qualquer origem (necess√°rio para ambiente web)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========== ENDPOINTS PRINCIPAIS ==========

@app.get("/", response_class=HTMLResponse)
async def home():
    """P√°gina inicial com informa√ß√µes sobre a API"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Servi√ßo de Streaming - REST API</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #2c3e50; text-align: center; }
            h2 { color: #34495e; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
            .endpoint { background-color: #ecf0f1; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .method { color: white; padding: 5px 10px; border-radius: 3px; font-weight: bold; }
            .get { background-color: #27ae60; }
            .post { background-color: #e74c3c; }
            .put { background-color: #f39c12; }
            .delete { background-color: #e67e22; }
            code { background-color: #34495e; color: white; padding: 2px 6px; border-radius: 3px; }
            a { color: #3498db; text-decoration: none; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéµ Servi√ßo de Streaming - REST API</h1>

            <h2>üìä Status do Servi√ßo</h2>
            <p>‚úÖ <strong>Servidor REST ativo</strong></p>
            <p>üìà Dados carregados: <strong>5 usu√°rios</strong>, <strong>8 m√∫sicas</strong>, <strong>4 playlists</strong></p>

            <h2>üìñ Documenta√ß√£o Interativa</h2>
            <p>
                <a href="/docs" target="_blank">üîó Swagger UI</a> - 
                <a href="/redoc" target="_blank">üîó ReDoc</a>
            </p>

            <h2>üõ†Ô∏è Endpoints Dispon√≠veis</h2>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/usuarios</code>
                <p>Lista todos os usu√°rios do servi√ßo</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/musicas</code>
                <p>Lista todas as m√∫sicas dispon√≠veis</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/usuarios/{id_usuario}/playlists</code>
                <p>Lista todas as playlists de um usu√°rio espec√≠fico</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/playlists/{id_playlist}/musicas</code>
                <p>Lista todas as m√∫sicas de uma playlist espec√≠fica</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/musicas/{id_musica}/playlists</code>
                <p>Lista todas as playlists que cont√™m uma m√∫sica espec√≠fica</p>
            </div>

            <div class="endpoint">
                <span class="method get">GET</span> <code>/stats</code>
                <p>Estat√≠sticas gerais do servi√ßo</p>
            </div>

            <h2>üí° Exemplos de Uso</h2>
            <p>Teste os endpoints acima clicando nos links da documenta√ß√£o ou fazendo requisi√ß√µes HTTP.</p>

            <h2>üîß Tecnologia</h2>
            <p>Esta API foi constru√≠da com <strong>FastAPI</strong> e demonstra os princ√≠pios <strong>REST</strong>:</p>
            <ul>
                <li>üìù <strong>Recursos identificados por URIs</strong> (/usuarios, /musicas, /playlists)</li>
                <li>üîó <strong>Verbos HTTP padronizados</strong> (GET, POST, PUT, DELETE)</li>
                <li>üóÇÔ∏è <strong>Representa√ß√£o JSON</strong> dos dados</li>
                <li>üîÑ <strong>Interface uniforme</strong> e stateless</li>
            </ul>
        </div>
    </body>
    </html>
    """
    return html_content

# ========== PAGINATION AND ERROR HANDLING ==========

class PaginatedResponse:
    def __init__(self, items: List, total: int, page: int, page_size: int):
        self.items = items
        self.total = total
        self.page = page
        self.page_size = page_size
        self.total_pages = (total + page_size - 1) // page_size

    def dict(self):
        return {
            "items": self.items,
            "total": self.total,
            "page": self.page,
            "page_size": self.page_size,
            "total_pages": self.total_pages
        }

@app.get("/usuarios", response_model=Dict, tags=["usuarios"])
async def listar_todos_usuarios(
    page: int = Query(1, ge=1, description="N√∫mero da p√°gina"),
    page_size: int = Query(10, ge=1, le=100, description="Itens por p√°gina")
):
    """
    Lista todos os usu√°rios do servi√ßo com pagina√ß√£o.

    **Princ√≠pio REST**: Recurso /usuarios acessado via GET
    """
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    
    usuarios_paginados = data_loader.usuarios[start_idx:end_idx]
    return PaginatedResponse(
        items=usuarios_paginados,
        total=len(data_loader.usuarios),
        page=page,
        page_size=page_size
    ).dict()

@app.get("/musicas", response_model=Dict, tags=["musicas"])
async def listar_todas_musicas(
    page: int = Query(1, ge=1, description="N√∫mero da p√°gina"),
    page_size: int = Query(10, ge=1, le=100, description="Itens por p√°gina")
):
    """
    Lista todas as m√∫sicas dispon√≠veis no servi√ßo com pagina√ß√£o.

    **Princ√≠pio REST**: Recurso /musicas acessado via GET
    """
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    
    musicas_paginadas = data_loader.musicas[start_idx:end_idx]
    return PaginatedResponse(
        items=musicas_paginadas,
        total=len(data_loader.musicas),
        page=page,
        page_size=page_size
    ).dict()

@app.get("/playlists", response_model=Dict, tags=["playlists"])
async def listar_todas_playlists(
    page: int = Query(1, ge=1, description="N√∫mero da p√°gina"),
    page_size: int = Query(10, ge=1, le=100, description="Itens por p√°gina")
):
    """
    Lista todas as playlists dispon√≠veis no servi√ßo com pagina√ß√£o.

    **Princ√≠pio REST**: Recurso /playlists acessado via GET
    """
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    
    playlists_paginadas = data_loader.playlists[start_idx:end_idx]
    return PaginatedResponse(
        items=playlists_paginadas,
        total=len(data_loader.playlists),
        page=page,
        page_size=page_size
    ).dict()

@app.get("/usuarios/{id_usuario}/playlists", response_model=List[Dict], tags=["usuarios"])
async def listar_playlists_usuario(id_usuario: str):
    """
    Lista todas as playlists de um usu√°rio espec√≠fico.

    **Princ√≠pio REST**: Recurso aninhado /usuarios/{id}/playlists
    """
    # Verificar se usu√°rio existe
    usuario_existe = any(u["id"] == id_usuario for u in data_loader.usuarios)
    if not usuario_existe:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    playlists_usuario = data_loader.listar_playlists_usuario(id_usuario)
    return playlists_usuario

@app.get("/playlists/{id_playlist}/musicas", response_model=List[Dict], tags=["playlists"])
async def listar_musicas_playlist(id_playlist: str):
    """
    Lista todas as m√∫sicas de uma playlist espec√≠fica.

    **Princ√≠pio REST**: Recurso aninhado /playlists/{id}/musicas
    """    # Encontrar a playlist
    playlist = data_loader.get_playlist(id_playlist)
    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist n√£o encontrada")

    # Buscar as m√∫sicas da playlist
    musicas_da_playlist = data_loader.listar_musicas_playlist(id_playlist)
    return musicas_da_playlist

@app.get("/musicas/{id_musica}/playlists", response_model=List[Dict], tags=["musicas"])
async def listar_playlists_com_musica(id_musica: str):
    """
    Lista todas as playlists que cont√™m uma m√∫sica espec√≠fica.

    **Princ√≠pio REST**: Recurso aninhado /musicas/{id}/playlists
    """    # Verificar se m√∫sica existe
    musica_existe = any(m["id"] == id_musica for m in data_loader.musicas)
    if not musica_existe:
        raise HTTPException(status_code=404, detail="M√∫sica n√£o encontrada")

    playlists_com_musica = data_loader.listar_playlists_com_musica(id_musica)
    return playlists_com_musica

@app.get("/stats", tags=["estatisticas"])
async def obter_estatisticas():
    """
    Retorna estat√≠sticas gerais do servi√ßo.

    **Princ√≠pio REST**: Endpoint adicional para metadados
    """
    total_musicas_em_playlists = sum(len(p["musicas"]) for p in data_loader.playlists)

    return {
        "total_usuarios": len(data_loader.usuarios),
        "total_musicas": len(data_loader.musicas),
        "total_playlists": len(data_loader.playlists),
        "total_musicas_em_playlists": total_musicas_em_playlists,
        "media_musicas_por_playlist": total_musicas_em_playlists / len(data_loader.playlists) if data_loader.playlists else 0,
        "usuarios_com_playlists": len(set(p["id_usuario"] for p in data_loader.playlists)),
        "tecnologia": "REST",
        "framework": "FastAPI",
        "status": "ativo"
    }

# ========== ENDPOINTS CRUD  ==========

@app.post("/usuarios", response_model=Dict, tags=["usuarios"])
async def criar_usuario(usuario_data: UsuarioCreate):
    """
    Cria um novo usu√°rio.

    **Princ√≠pio REST**: POST para criar recursos com JSON body
    """
    try:
        novo_usuario = data_loader.criar_usuario(nome=usuario_data.nome, idade=usuario_data.idade)
        return novo_usuario
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/usuarios/{id_usuario}", response_model=Dict, tags=["usuarios"])
async def obter_usuario(id_usuario: str):
    """
    Obt√©m um usu√°rio espec√≠fico por ID.

    **Princ√≠pio REST**: GET em recurso espec√≠fico
    """
    usuario = data_loader.get_usuario(id_usuario)
    if not usuario:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    return usuario

@app.put("/usuarios/{id_usuario}", response_model=Dict, tags=["usuarios"])
async def atualizar_usuario(id_usuario: str, usuario_data: UsuarioUpdate):
    """
    Atualiza um usu√°rio existente.

    **Princ√≠pio REST**: PUT para atualizar recursos com JSON body
    """
    try:
        dados_atualizacao = {}
        if usuario_data.nome is not None:
            dados_atualizacao["nome"] = usuario_data.nome
        if usuario_data.idade is not None:
            dados_atualizacao["idade"] = usuario_data.idade
            
        if not dados_atualizacao:
            raise HTTPException(status_code=400, detail="Nenhum dado fornecido para atualiza√ß√£o")
            
        usuario_atualizado = data_loader.atualizar_usuario(id_usuario, **dados_atualizacao)
        return usuario_atualizado
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))

@app.delete("/usuarios/{id_usuario}", tags=["usuarios"])
async def deletar_usuario(id_usuario: str):
    """
    Remove um usu√°rio do sistema.

    **Princ√≠pio REST**: DELETE para remover recursos
    """
    # Primeiro buscar o usu√°rio para ter seus dados
    usuario = data_loader.get_usuario(id_usuario)
    if not usuario:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    # Agora deletar o usu√°rio
    sucesso = data_loader.deletar_usuario(id_usuario)
    if not sucesso:
        raise HTTPException(status_code=500, detail="Erro interno ao deletar usu√°rio")
    
    return {"message": f"Usu√°rio '{usuario['nome']}' removido com sucesso"}

# ========== CRUD OPERATIONS FOR MUSICS ==========

@app.post("/musicas", response_model=Dict, tags=["musicas"])
async def criar_musica(musica_data: MusicaCreate):
    """
    Cria uma nova m√∫sica.

    **Princ√≠pio REST**: POST para criar recursos com JSON body
    """
    try:
        nova_musica = data_loader.criar_musica(
            nome=musica_data.nome, 
            artista=musica_data.artista, 
            duracao_segundos=musica_data.duracao_segundos
        )
        return nova_musica
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/musicas/{id_musica}", response_model=Dict, tags=["musicas"])
async def obter_musica(id_musica: str):
    """
    Obt√©m uma m√∫sica espec√≠fica por ID.

    **Princ√≠pio REST**: GET em recurso espec√≠fico
    """
    musica = data_loader.get_musica(id_musica)
    if not musica:
        raise HTTPException(status_code=404, detail="M√∫sica n√£o encontrada")
    return musica

@app.put("/musicas/{id_musica}", response_model=Dict, tags=["musicas"])
async def atualizar_musica(id_musica: str, musica_data: MusicaUpdate):
    """
    Atualiza uma m√∫sica existente.

    **Princ√≠pio REST**: PUT para atualizar recursos com JSON body
    """
    try:
        dados_atualizacao = {}
        if musica_data.nome is not None:
            dados_atualizacao["nome"] = musica_data.nome
        if musica_data.artista is not None:
            dados_atualizacao["artista"] = musica_data.artista
        if musica_data.duracao_segundos is not None:
            dados_atualizacao["duracao_segundos"] = musica_data.duracao_segundos
            
        if not dados_atualizacao:
            raise HTTPException(status_code=400, detail="Nenhum dado fornecido para atualiza√ß√£o")
            
        musica_atualizada = data_loader.atualizar_musica(id_musica, **dados_atualizacao)
        return musica_atualizada
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))

@app.delete("/musicas/{id_musica}", tags=["musicas"])
async def deletar_musica(id_musica: str):
    """
    Remove uma m√∫sica do sistema.

    **Princ√≠pio REST**: DELETE para remover recursos
    """
    # Primeiro buscar a m√∫sica para ter seus dados
    musica = data_loader.get_musica(id_musica)
    if not musica:
        raise HTTPException(status_code=404, detail="M√∫sica n√£o encontrada")
    
    # Agora deletar a m√∫sica
    sucesso = data_loader.deletar_musica(id_musica)
    if not sucesso:
        raise HTTPException(status_code=500, detail="Erro interno ao deletar m√∫sica")
    
    return {"message": f"M√∫sica '{musica['nome']}' removida com sucesso"}

# ========== CRUD OPERATIONS FOR PLAYLISTS ==========

@app.post("/playlists", response_model=Dict, tags=["playlists"])
async def criar_playlist(playlist_data: PlaylistCreate):
    """
    Cria uma nova playlist.

    **Princ√≠pio REST**: POST para criar recursos com JSON body
    """
    try:
        # Validar se o usu√°rio existe antes de criar a playlist
        usuario = data_loader.get_usuario(playlist_data.id_usuario)
        if not usuario:
            raise HTTPException(status_code=400, detail="Usu√°rio n√£o encontrado")
        
        nova_playlist = data_loader.criar_playlist(
            nome=playlist_data.nome,
            id_usuario=playlist_data.id_usuario,
            musicas=playlist_data.musicas
        )
        return nova_playlist
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/playlists/{id_playlist}", response_model=Dict, tags=["playlists"])
async def obter_playlist(id_playlist: str):
    """
    Obt√©m uma playlist espec√≠fica por ID.

    **Princ√≠pio REST**: GET em recurso espec√≠fico
    """
    playlist = data_loader.get_playlist(id_playlist)
    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist n√£o encontrada")
    return playlist

@app.put("/playlists/{id_playlist}", response_model=Dict, tags=["playlists"])
async def atualizar_playlist(id_playlist: str, playlist_data: PlaylistUpdate):
    """
    Atualiza uma playlist existente.

    **Princ√≠pio REST**: PUT para atualizar recursos com JSON body
    """
    try:
        dados_atualizacao = {}
        if playlist_data.nome is not None:
            dados_atualizacao["nome"] = playlist_data.nome
        if playlist_data.musicas is not None:
            dados_atualizacao["musicas"] = playlist_data.musicas
            
        if not dados_atualizacao:
            raise HTTPException(status_code=400, detail="Nenhum dado fornecido para atualiza√ß√£o")
            
        playlist_atualizada = data_loader.atualizar_playlist(id_playlist, **dados_atualizacao)
        return playlist_atualizada
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))

@app.delete("/playlists/{id_playlist}", tags=["playlists"])
async def deletar_playlist(id_playlist: str):
    """
    Remove uma playlist do sistema.

    **Princ√≠pio REST**: DELETE para remover recursos
    """
    # Primeiro buscar a playlist para ter seus dados
    playlist = data_loader.get_playlist(id_playlist)
    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist n√£o encontrada")
    
    # Agora deletar a playlist
    sucesso = data_loader.deletar_playlist(id_playlist)
    if not sucesso:
        raise HTTPException(status_code=500, detail="Erro interno ao deletar playlist")
    
    return {"message": f"Playlist '{playlist['nome']}' removida com sucesso"}

# ========== ERROR HANDLERS ==========

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """
    Handler global para exce√ß√µes HTTP.
    """
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": {
                "code": exc.status_code,
                "message": exc.detail,
                "type": "HTTPException"
            }
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """
    Handler global para exce√ß√µes n√£o tratadas.
    """
    return JSONResponse(
        status_code=500,
        content={
            "error": {
                "code": 500,
                "message": "Erro interno do servidor",
                "type": "InternalServerError"
            }
        }
    )

# ========== FUN√á√ÉO PARA EXECUTAR O SERVIDOR ==========

def executar_servidor():
    """
    Fun√ß√£o para executar o servidor REST.
    Use esta fun√ß√£o em ambientes que n√£o suportam uvicorn diretamente.
    """
    import uvicorn
    print("üöÄ Iniciando servidor REST...")
    print("üìç Acesse: http://localhost:8000")
    print("üìñ Documenta√ß√£o: http://localhost:8000/docs")

    uvicorn.run(
        "rest_service:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    executar_servidor()